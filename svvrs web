--[[ 
    Huge Notifier (External Config Version)
    ---------------------------------------
    - Reads settings from `getgenv().Config`
    - Uses loadstring() to fetch updates from GitHub
    - Keeps the main script separate from configurations
]]

-- Services & Modules
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local LocalPlayer = Players.LocalPlayer
repeat task.wait() until game:IsLoaded()
repeat task.wait() until not LocalPlayer.PlayerGui:FindFirstChild('__INTRO')

local Library = ReplicatedStorage:FindFirstChild("Library")
if not Library then
    warn("Error: Library not found in ReplicatedStorage!")
    return
end

local Client = Library:FindFirstChild("Client")
if not Client then
    warn("Error: Client module not found in Library!")
    return
end

-- Require Modules
local ExistCmds = require(Client.ExistCountCmds)
local RapCmds = require(Client.DevRAPCmds)
local Network = require(Client.Network)
local SaveMod = require(Client.Save)

-- Load Config from getgenv()
local Config = getgenv().Config or {}

local WebhookID = Config["Notifications"] and Config["Notifications"]["UserID"] or "DEFAULT_USER_ID"
local WebhookURL = Config["Notifications"] and Config["Notifications"]["Webhook"] or "DEFAULT_WEBHOOK_URL"
local EmbedColor = Config["Notifications"] and Config["Notifications"]["EmbedColor"] or 0x1E3A5F -- Default to Dark Blue

-- Webhook Rate Limiting System
local recentWebhookCount = 0
local lastWebhookTime = os.time()

-----------------------------------------------------
-- Utility Functions
-----------------------------------------------------

-- Formats large numbers with suffixes
local function Formatint(int)
    local Suffix = {"", "k", "M", "B", "T", "Qd", "Qn", "Sx", "Sp", "Oc", "No", "De"}
    local Index = 1
    while int >= 1000 and Index < #Suffix do
        int = int / 1000
        Index = Index + 1
    end
    return string.format("%.2f%s", int, Suffix[Index])
end

-- Fetch the correct pet image ID from BigGames API
local function GetAsset(petId, pt)
    local PetsDirectory = require(Library.Directory.Pets)
    local Asset = PetsDirectory[petId]
    return Asset and (pt == 1 and Asset.goldenThumbnail or Asset.thumbnail) or "14976456685"
end

-- Build correct pet image URL using BigGames API
local function GetImageUrl(petData)
    local assetId = GetAsset(petData.id, petData.pt)
    return "https://biggamesapi.io/image/" .. assetId:gsub("rbxassetid://", "")
end

-- Fetch RAP & Exist values
local function GetStats(Cmds, petData)
    return Cmds.Get({
        Class = { Name = "Pet" },
        IsA = function(InputClass) return InputClass == "Pet" end,
        GetId = function() return petData.id end,
        StackKey = function()
            return HttpService:JSONEncode({
                id = petData.id,
                sh = petData.sh,
                pt = petData.pt,
                tn = petData.tn
            })
        end
    }) or 0
end

-----------------------------------------------------
-- Webhook Notification (Uses Configurable Settings)
-----------------------------------------------------
local function SendWebhook(Id, pt, sh)
    -- Check rate limit
    local currentTime = os.time()
    if recentWebhookCount >= 3 and currentTime - lastWebhookTime < 2 then
        task.wait(2) -- Apply cooldown if sending too many at once
    end

    local Img = GetImageUrl({ id = Id, pt = pt })
    local Version = pt == 1 and "Golden " or pt == 2 and "Rainbow " or ""
    local Title = "**Obtained a " .. Version .. (sh and "Shiny " or "") .. Id .. "**"

    local Exist = GetStats(ExistCmds, { id = Id, pt = pt, sh = sh })
    local Rap = GetStats(RapCmds, { id = Id, pt = pt, sh = sh })

    local Body = HttpService:JSONEncode({
        content = string.format("<@%s>", WebhookID),
        embeds = {{
            title = Title,
            color = EmbedColor, -- Uses the configurable color
            timestamp = DateTime.now():ToIsoDate(),
            thumbnail = { url = Img },
            fields = {
                { name = "ðŸ’° RAP:", value = "`" .. Formatint(Rap) .. "`", inline = true },
                { name = "ðŸ—¿ Exist:", value = "`" .. Formatint(Exist) .. "`", inline = true }
            },
            footer = { text = "Huge Notifier (fuck pira)" }
        }}
    })
    
    local success, err = pcall(function()
        return request({
            Url = WebhookURL,
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = Body
        })
    end)

    if not success then
        warn("[ERROR] Webhook failed:", err)
    else
        print("[DEBUG] Webhook sent for", Id)
        recentWebhookCount = recentWebhookCount + 1
        lastWebhookTime = os.time()
    end
end

-----------------------------------------------------
-- Inventory Tracking (Ensuring All Pets Are Detected)
-----------------------------------------------------
local TrackedPets = {}

-- Initial scan for existing Huge/Titanic pets
local function InitializeTracking()
    print("[DEBUG] Initializing Huge/Titanic pet tracking...")

    local inventory = SaveMod.Get().Inventory.Pet
    for PetUID, petData in pairs(inventory) do
        for _, searchName in pairs(Config["Notifications"]["Id Names"] or {"Huge", "Titanic"}) do
            if petData.id:find(searchName) then
                TrackedPets[PetUID] = true
                print("[DEBUG] Already owned:", petData.id)
                SendWebhook(petData.id, petData.pt, petData.sh) -- Send webhook for existing pets
            end
        end
    end
end

-- Detect new Huges/Titanics when inventory updates
Network.Fired('Items: Update'):Connect(function(Player, Inv)
    if Inv['set'] and Inv['set']['Pet'] then
        for PetUID, petData in pairs(Inv['set']['Pet']) do
            for _, searchName in pairs(Config["Notifications"]["Id Names"] or {"Huge", "Titanic"}) do
                if petData.id:find(searchName) and not TrackedPets[PetUID] then
                    TrackedPets[PetUID] = true
                    print("[DEBUG] New Huge/Titanic detected:", petData.id)
                    SendWebhook(petData.id, petData.pt, petData.sh)
                end
            end
        end
    end
end)

-- Initialize tracking at script start
InitializeTracking()
